generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  password          String?
  oauth_provider    String?
  oauth_provider_id String?
  profile_image     String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  projects          Project[]

  @@map("users")
}

model Project {
  id                  String             @id @default(uuid())
  user_id             String
  project_title       String
  project_description String?
  tags                String[]
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  stages              ProjectStage[]
  user                User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("projects")
}

model ProjectStage {
  id          String    @id @default(uuid())
  project_id  String
  stage_name  StageName
  user_inputs Json
  ai_outputs  Json
  finalized   Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  project     Project   @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@unique([project_id, stage_name])
  @@map("project_stages")
}

enum StageName {
  Ideation
  Planning
  Research
  Development
  Testing
  Deployment
  Maintenance
  Review
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
